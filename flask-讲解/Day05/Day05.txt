1.响应对象
	1.响应对象
		resp = make_response("")
		return resp
	2.重定向
		由服务器通知浏览器向新的地址发送一个请求
		resp = redirect('/xxx')
		return resp
2.文件上传
	1.注意问题
		表单的method必须为 post
		表单的enctype必须为 multipart/form-data
	2.服务器端
		1.request.files 获取上传的文件
			f = request.files['xx']
		2.将文件保存至服务器的指定目录处
			f.save('保存路径')

			1.获取项目的绝对路径
				basedir = os.path.dirname(__file__)
			2.通过时间字符串代替文件名称
				1.获取当前的时间字符串
					ftime = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
				2.获取文件扩展名
					ext = f.filename.split('.')[1]
				3.拼完整的上传路径
					upload_path=os.path.join(basedir,'static/upload',ftime+'.'+ext)
3.ORM
	1.ORM
		1· 中文名：对象关系映射
		2. ORM三大特征
			1.数据表 到 编程类的映射
			2.数据类型的映射
			3.关系映射
	2.Python 和 Flask 中 使用 ORM
		Python 和 Flask ：SQLAlchemy
		Flask ：必须要有 Flask-SQLAlchemy 的支持
	3.Flask中配置数据库
		from flask import Flask
		from flask_sqlalchemy import SQLAlchemy

		app = Flask(__name__)

		app.config['SQLALCHEMY_DATABASE_URI']="mysql://root:123456@localhost:3306/flask"
		db = SQLAlchmey(app)

	===============================================
1.模型 - Models
	1.定义模型
		模型：数据库中的表在编程语言中的体现，其本质就是一个python类(模型类 或 实体类)

		语法：
			class MODELNAME(db.Model):
				__tablename__="TABLENAME"
				COLUMN_NAME=db.Column(db.TYPE,OPTIONS)
                        #启动
                        db.create_all()

			1.MODELNAME : 定义模型类的名称，根据表名设定
			2.TABLENAME : 映射到数据库中表的名称
			3.COLUMN_NAME : 属性名，映射到数据表就是列名
			4.TYPE : 映射到列的数据类型
			5.OPTIONS : 列选项

		db.TYPE 列类型如下：
			类型名       python类型      说明
			Integer      int              普通整数，32位
			SmallInteger int              小范围整数，通常16位
			BigInteger   int或long				不限精度整数
			Float        float            浮点数
			Numeric      decimal.Decimal  定点数
			String       str              变长字符串
			Text         str              变长字符串，优化
			Unicode      unicode          变长Unicode字符串
			UnicodeText  unicode          优化后的变长Unicode串
			Boolean      bool             布尔值
			Date         datetime.date    日期
			Time         datetime.time    时间
			DateTime     datetime.datetime日期和时间
		OPTIONS 列选项:
			选项名          说明
			primary_key     如果设置为True表示该列为主键
			unique          如果设置为True表示该列值唯一
			index           如果设置为True表示该列要创建索引
			nullable        如果设置为True表示该列允许为空
			default         表示该列的默认值

		练习：
			1.创建 Student 模型类
				表名:student
				字段：
					1.id ，主键，自增
					2.sname , 姓名，长度为30并且不允许为空的字符串
					3.sage,年龄，整数
			2.创建 Teacher 模型类
				表名:teacher
				字段:
					1.id , 主键，自增
					2.tname ，姓名，长度为30并且不允许为空的字符串
					3.tage,年龄，整数
			3.创建Course 模型类
				表名:course
				字段：
					1·id，主键，自增
					2·cname ，课程名称长度为30并且不允许为空的字符串
	2.数据库操作 - 插入
		1.创建实体对象
		2.完成插入
			db.session.add(实体对象)
			db.session.commit() 
	3.数据库操作 - 查询
		1.基于 db.session 进行查询
			1.db.session.query()
				该函数会返回一个Query对象，类型为BaseQuery
				该对象中包含了实体类对应的表中的所有的数据

				该函数可以接收一个或多个参数，参数们表示的是要查询的实体对象是谁
			2.查询执行函数
				目的：在query()的基础上得到最终想要的结果
				语法：db.session.query(...).查询执行函数()
				函数              说明
				all()             以列表的方式返回query()中所有查询函结果
				first()           返回查询结果中的第一个结果，如果没有结果，则返回None
				first_or_404()    返回查询结果中的第一个结果，如果没有结果的话，则终止并返回404
				count()           返回查询结果的数量
			3.查询过滤器函数
				作用：在查询的基础上，筛选部分行数据
				语法：db.session.query(...).过滤器函数().查询执行函数()
				过滤器函数       说明
				filter()         按指定条件进行过滤(多表,单表,定值,不定值)       
				filter_by()      按等值条件过滤时使用
				limit()          按限制行数获取
				order_by()       根据指定条件进行排序
				group_by()       根据指定条件进行分组

				过滤器函数详解：
				1.filter()
					注意：条件必须由 模型类.属性 构成
					1.查询年龄大于30的Users的信息
						db.session.query(Users).filter(Users.age>30).all()
					2.查询年龄大于30并且id大于1的Users的信息
						db.session.query(Users).filter(Users.age>30,Users.id>1).all()
					3.查询年龄大于30或者id大于1的Users的信息
						注意：查询 或 的操作，要借助于 or_()
						db.session.query(Users).filter(or_(Users.age>30,Users.id>1)).all()
					4.查询id为2的Users的信息
						注意：等值判断必须用 ==
						db.session.query(Users).filter(Users.id==2).all()
					5.查询 email 中包含 'w' 的Users的信息 - 模糊查询
						注意：模糊查询like需要使用实体类中属性提供的like()
						db.session.query(Users).filter(Users.email.like('%w%')).all()
					6.查询 id 在 [2,4] 之间的 Users 的信息
						注意：模糊查询in需要使用实体类中属性提供的in_([])
                                               db.session.query(Users).filter(Users.id.in_([2,4]).all()
				2.聚合函数
					db.session.query(func.聚合函数(列名).label('别名')).all()
				3.filter_by()
					查询 id=5的Users的信息
					db.session.query(Users).filter_by(id=5).all()
				4.limit()
					result = db.session.query(Users).limit(2).all()
					result = db.session.query(Users).limit(2).offset(1).all()
				5.order_by()
					# 按照id列的值降序排序
					db.session.query(Users).order_by("id desc")
					# 按照age列的值降序排序，二级排序按照id升序排序
					db.session.query(Users).order_by("age desc,id asc").all()
				6.group_by()
					db.session.query(Users).group_by('age').all()
		2.基于 Models   类进行查询 





数据库中的一行：实体
实体完整性：表中的实体不能完全重复 - 主键

SELECT users.id AS users_id, users.username AS users_username, users.age AS users_age, users.email AS users_email 
FROM users

SELECT users.id AS users_id, users.username AS users_username, users.age AS users_age, users.email AS users_email, course.id AS course_id, course.cname AS course_cname 
FROM users, course

查询Users中所有人的年龄的总和
select sum(age) as 'sum_age' from users

select id,sum(age) as 'sum_age' from users

db.session.query(Users.id,func.sum('age'))

select * from users limit 1,2